
Timer_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  000103f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e8  080003e8  000103f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e8  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003f8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b13  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000019d  00000000  00000000  00010f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  000110d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00011138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c357  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000056f  00000000  00000000  0002d4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e4be  00000000  00000000  0002da46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbf04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000cbf80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003cc 	.word	0x080003cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003cc 	.word	0x080003cc

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <TIM2_IRQHandler>:

/*************************************************
* external interrupt handler
*************************************************/
void TIM2_IRQHandler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d00e      	beq.n	8000288 <TIM2_IRQHandler+0x30>
        if (TIM2->SR & 0x01) {
 800026a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	f003 0301 	and.w	r3, r3, #1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d007      	beq.n	8000288 <TIM2_IRQHandler+0x30>
            TIM2->SR &= ~(1U << 0);
 8000278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6113      	str	r3, [r2, #16]
        }
    }

    GPIOA->ODR ^= 0x0020;
 8000288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000292:	f083 0320 	eor.w	r3, r3, #32
 8000296:	6153      	str	r3, [r2, #20]


}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
	...

080002a4 <main>:

/*************************************************
* Main
*************************************************/
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	// enable GPIOA clock
	RCC->AHB2ENR = 0x1;
 80002a8:	4b20      	ldr	r3, [pc, #128]	; (800032c <main+0x88>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	64da      	str	r2, [r3, #76]	; 0x4c
	// Make GPIOA Pin5 as output pin (bits 1:0 in MODER register)
	GPIOA->MODER &= 0xFFFFF3FF;
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002bc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000400;
 80002be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002cc:	6013      	str	r3, [r2, #0]
	// enable TIM2 clock
	RCC->APB1ENR1 |= (1 << 0);
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <main+0x88>)
 80002d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d2:	4a16      	ldr	r2, [pc, #88]	; (800032c <main+0x88>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6593      	str	r3, [r2, #88]	; 0x58

	// fCK_PSC / (PSC[15:0] + 1)
	// 40 Khz / n + 1 =  timer clock speed
	TIM2->PSC = 40680;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	f649 62e8 	movw	r2, #40680	; 0x9ee8
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
	// set total count
	TIM2->ARR = COUNT;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	220a      	movs	r2, #10
 80002ea:	62da      	str	r2, [r3, #44]	; 0x2c

	// Update Interrupt Enable
	TIM2->DIER |= (1 << 0);
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 80002fc:	2102      	movs	r1, #2
 80002fe:	201c      	movs	r0, #28
 8000300:	f7ff ff80 	bl	8000204 <__NVIC_SetPriority>
	// enable TIM2 IRQ from NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000304:	201c      	movs	r0, #28
 8000306:	f7ff ff5f 	bl	80001c8 <__NVIC_EnableIRQ>

	// Enable Timer 2 module (CEN, bit0)
	TIM2->CR1 |= (1 << 0);
 800030a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]

	GPIOA->ODR ^= 0x0020;
 800031a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000324:	f083 0320 	eor.w	r3, r3, #32
 8000328:	6153      	str	r3, [r2, #20]

	while(1)
 800032a:	e7fe      	b.n	800032a <main+0x86>
 800032c:	40021000 	.word	0x40021000

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490e      	ldr	r1, [pc, #56]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0b      	ldr	r4, [pc, #44]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800035a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff9f 	bl	80002a4 <main>

08000366 <LoopForever>:

LoopForever:
    b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	20000020 	.word	0x20000020

08000380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC1_2_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4e0d      	ldr	r6, [pc, #52]	; (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	; (80003c0 <__libc_init_array+0x3c>)
 800038a:	1ba4      	subs	r4, r4, r6
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2500      	movs	r5, #0
 8000390:	42a5      	cmp	r5, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4e0b      	ldr	r6, [pc, #44]	; (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	; (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1ba4      	subs	r4, r4, r6
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2500      	movs	r5, #0
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ac:	4798      	blx	r3
 80003ae:	3501      	adds	r5, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003b6:	4798      	blx	r3
 80003b8:	3501      	adds	r5, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e8 	.word	0x080003e8
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003ec 	.word	0x080003ec

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
 80003e4:	0000      	movs	r0, r0
	...
